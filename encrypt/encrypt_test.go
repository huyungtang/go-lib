package encrypt

import (
	"testing"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// TestEncrypt
// ****************************************************************************************************************************************
func TestEncrypt(t *testing.T) {
	str := "Hello World"
	es, er := Encrypt(str, DefaCost)
	if er != nil {
		t.Log(er)
		t.Fail()
	}
	t.Log(es)

	es, er = Decrypt(es)
	if er != nil {
		t.Fail()
	}

	if es != str {
		t.Fail()
	}
}

// TestBCrypt
// ****************************************************************************************************************************************
func TestBCrypt(t *testing.T) {
	str := "Hello World"
	es, er := BCrypt(str, 12)
	if er != nil {
		t.Fail()
	}

	if er = BCryptVerify(es, str); er != nil {
		t.Fail()
	}
}

// TestMD5
// ****************************************************************************************************************************************
func TestMD5(t *testing.T) {
	str := "Hello World"
	es, er := MD5(str)
	if er != nil {
		t.Fail()
	}

	if er = MD5Verify(es, str); er != nil {
		t.Fail()
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
