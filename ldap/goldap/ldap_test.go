package goldap

import (
	"testing"

	"github.com/huyungtang/go-lib/config"
	"github.com/huyungtang/go-lib/config/viper"
	"github.com/huyungtang/go-lib/file"
	"github.com/huyungtang/go-lib/ldap"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// TestLDAP
// ****************************************************************************************************************************************
func TestLDAP(t *testing.T) {
	c, err := viper.Init(
		config.PathOption(file.PathWorking("./../_testing")),
		config.EnvironmentOption("prod"),
	)
	if err != nil {
		t.Error(err)
	}

	var client ldap.Client
	if client, err = Init(c.GetString("LDAP.Bind", ""), ldap.BaseDNOption(c.GetString("LDAP.BaseDN", ""))); err != nil {
		t.Error(err)
	}
	defer client.Close()

	if err = client.Signin(c.GetString("LDAP.Username", ""), c.GetString("LDAP.Password", "")); err != nil {
		t.Error(err)
	}

	var result ldap.Result
	if result, err = client.Search("(&(cn=j_資訊人員)(objectClass=posixGroup))", ldap.AttributesOption("member")); err != nil {
		t.Error(err)
	}

	if result.Len() != 1 {
		t.Fail()
	}

	ms := result.Index(0).Attrs("member")
	for _, m := range ms {
		t.Log(m)
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
