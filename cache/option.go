package cache

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

var (
	ExpiredOption Options = ExpireOption(Expired)
	KeepTTLOption Options = ExpireOption(KeepTTL)
	StaticOption  Options = ExpireOption(Static)

	SkipOverrideOption Options = overrideOption("NX")
	UpdateOnlyOption   Options = overrideOption("XX")

	LPushOption Options = cmderOption("LPUSH")
	RPushOption Options = cmderOption("RPUSH")

	LPopOption Options = cmderOption("LPOP")
	RPopOption Options = cmderOption("RPOP")
)

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// DefaultOption
// ****************************************************************************************************************************************
func DefaultOption(fn DefaultFn) Options {
	return func(co *Option) {
		co.DefaFn = fn
	}
}

// ExpireOption
// ****************************************************************************************************************************************
func ExpireOption(sec int64) Options {
	return func(co *Option) {
		co.Expire = sec
	}
}

// PopCountOption
// ****************************************************************************************************************************************
func PopCountOption(count uint64) Options {
	return func(o *Option) {
		if count == 0 {
			o.Count = 1
		} else {
			o.Count = count
		}
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Option
// ****************************************************************************************************************************************
type Option struct {
	DefaFn   DefaultFn
	Expire   int64
	Override string
	Cmder    string
	Count    uint64
}

// ApplyOptions
// ****************************************************************************************************************************************
func (o *Option) ApplyOptions(opts []Options, defa ...Options) (opt *Option) {
	opts = append(defa, opts...)
	for _, optFn := range opts {
		optFn(o)
	}

	return o
}

// Options
// ****************************************************************************************************************************************
type Options func(*Option)

// DefaultFn
// ****************************************************************************************************************************************
type DefaultFn func(interface{}) (Options, error)

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// overrideOption *************************************************************************************************************************
func overrideOption(over string) Options {
	return func(co *Option) {
		co.Override = over
	}
}

// cmderOption ****************************************************************************************************************************
func cmderOption(dir string) Options {
	return func(o *Option) {
		o.Cmder = dir
	}
}
