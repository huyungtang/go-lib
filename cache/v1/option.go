package cache

import (
	"time"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

const (
	ExpirationExpired int64 = -2
	ExpirationKeepTTL int64 = 0
	ExpirationStatic  int64 = -1

	SetSkipOverride int64 = 1
	SetExistOnly    int64 = 2

	DirectionLeft  int64 = 1
	DirectionRight int64 = 2
)

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// DebugOption
// ****************************************************************************************************************************************
func DebugOption() Options {
	return func(o *Option) {
		o.IsDebug = true
	}
}

// DefaultOption
// ****************************************************************************************************************************************
func DefaultOption(fn defaultFn) Options {
	return func(o *Option) {
		o.DefaFn = fn
	}
}

// DirectionLeftOption
// ****************************************************************************************************************************************
func DirectionLeftOption() Options {
	return directionOption(DirectionLeft)
}

// DirectionRightOption
// ****************************************************************************************************************************************
func DirectionRightOption() Options {
	return directionOption(DirectionRight)
}

// ExpireOption
// ****************************************************************************************************************************************
func ExpireOption(sec int64) Options {
	return expireOption(sec)
}

// ExpiredAtOption
// ****************************************************************************************************************************************
func ExpiredAtOption(tm time.Time) Options {
	return expireOption(tm.Unix())
}

// ExpiredOption
// ****************************************************************************************************************************************
func ExpiredOption() Options {
	return expireOption(ExpirationExpired)
}

// IncreaseByOption
// ****************************************************************************************************************************************
func IncreaseByOption(step int64) Options {
	return func(o *Option) {
		o.IncrInt = step
	}
}

// IncreaseByFloatOption
// ****************************************************************************************************************************************
func IncreaseByFloatOption(step float64) Options {
	return func(o *Option) {
		o.IncrFloat = step
	}
}

// KeepTTLOption
// ****************************************************************************************************************************************
func KeepTTLOption() Options {
	return expireOption(ExpirationKeepTTL)
}

// StaticOption
// ****************************************************************************************************************************************
func StaticOption() Options {
	return expireOption(ExpirationStatic)
}

// SkipOverrideOption
// ****************************************************************************************************************************************
func SkipOverrideOption() Options {
	return updateOpton(SetSkipOverride)
}

// UpdateOnlyOption
// ****************************************************************************************************************************************
func UpdateOnlyOption() Options {
	return updateOpton(SetExistOnly)
}

// ApplyOptions
// ****************************************************************************************************************************************
func ApplyOptions(defa []Options, opts ...Options) *Option {
	defa = append(defa, opts...)
	opt := new(Option)
	for _, fn := range defa {
		fn(opt)
	}

	return opt
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Option *********************************************************************************************************************************
type Option struct {
	DefaFn    defaultFn
	Expire    int64
	Update    int64
	Direction int64
	IncrInt   int64
	IncrFloat float64
	IsDebug   bool
}

// Options
// ****************************************************************************************************************************************
type Options func(*Option)

// defaultFn ******************************************************************************************************************************
type defaultFn func(interface{}) ([]Options, error)

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// expireOption ***************************************************************************************************************************
func expireOption(exp int64) Options {
	return func(o *Option) {
		o.Expire = exp
	}
}

// updateOpton ****************************************************************************************************************************
func updateOpton(upd int64) Options {
	return func(o *Option) {
		o.Update = upd
	}
}

// directionOption ************************************************************************************************************************
func directionOption(dir int64) Options {
	return func(o *Option) {
		o.Direction = dir
	}
}
