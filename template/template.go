package template

import (
	"bytes"
	"html/template"
	"io"
	"os"
	"sync"

	"github.com/tdewolff/minify"
	"github.com/tdewolff/minify/css"
	"github.com/tdewolff/minify/html"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Init
// ****************************************************************************************************************************************
func Init(opts ...Options) Template {
	p := &tmpl{
		buf: os.Stdout,
	}
	for _, opt := range opts {
		opt(p)
	}

	return p
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// tmpl ***********************************************************************************************************************************
type tmpl struct {
	*template.Template
	err      error
	buf      io.Writer
	mini     *minify.M
	miniOnce sync.Once
}

// minifier *******************************************************************************************************************************
func (o *tmpl) minifier(reader io.Reader) {
	o.miniOnce.Do(func() {
		o.mini = minify.New()
		o.mini.AddFunc("text/css", css.Minify)
		o.mini.AddFunc("text/html", html.Minify)
	})

	o.err = o.mini.Minify("text/html", o.buf, reader)
}

// Template
// ****************************************************************************************************************************************
type Template interface {
	// Execute(html_name, dto)
	Execute(string, interface{})

	Err() error
}

// Execute
// ****************************************************************************************************************************************
func (o *tmpl) Execute(name string, dto interface{}) {
	var buf bytes.Buffer
	if o.err = o.Template.ExecuteTemplate(&buf, name, dto); o.err != nil {
		return
	}

	o.minifier(&buf)
}

// Err
// ****************************************************************************************************************************************
func (o *tmpl) Err() (err error) {
	return o.err
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
