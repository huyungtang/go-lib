package template

import (
	"bytes"
	base "html/template"
	"io"
	"os"
	"sync"

	"github.com/tdewolff/minify"
	"github.com/tdewolff/minify/css"
	"github.com/tdewolff/minify/html"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Init
// ****************************************************************************************************************************************
func Init(opts ...Options) (p Template, err error) {
	tpl := &template{
		mini: minify.New(),
		out:  os.Stdout,
	}
	tpl.mini.AddFunc("text/css", css.Minify)
	tpl.mini.AddFunc("text/html", html.Minify)

	for _, opt := range opts {
		if err = opt(tpl); err != nil {
			return
		}
	}

	return tpl, nil
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// template *******************************************************************************************************************************
type template struct {
	*base.Template
	tmplOnce sync.Once
	mini     *minify.M
	miniOnce sync.Once
	out      io.Writer
}

// minifier *******************************************************************************************************************************
func (o *template) minifier(reader io.Reader) (err error) {
	o.miniOnce.Do(func() {
		o.mini = minify.New()
		o.mini.AddFunc("text/css", css.Minify)
		o.mini.AddFunc("text/html", html.Minify)
	})

	return o.mini.Minify("text/html", o.out, reader)
}

// Template
// ****************************************************************************************************************************************
type Template interface {
	// Execute(dto)
	Execute(any) error

	// ExecuteTemplate(template, dto)
	ExecuteTemplate(string, any) error
}

// Execute
// ****************************************************************************************************************************************
func (o *template) Execute(data any) (err error) {
	var buf bytes.Buffer
	if err = o.Template.Execute(&buf, data); err != nil {
		return
	}

	return o.minifier(&buf)
}

// ExecuteTemplate
// ****************************************************************************************************************************************
func (o *template) ExecuteTemplate(name string, data any) (err error) {
	var buf bytes.Buffer
	if err = o.Template.ExecuteTemplate(&buf, name, data); err != nil {
		return
	}

	return o.minifier(&buf)
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
