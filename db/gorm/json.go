package gorm

import (
	"database/sql/driver"
	"encoding/json"

	base "gorm.io/gorm"
	"gorm.io/gorm/schema"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Json
// ****************************************************************************************************************************************
type Json json.RawMessage

func (Json) GormDBDataType(db *base.DB, field *schema.Field) (s string) {
	switch db.Dialector.Name() {
	case "mysql", "sqlite":
		s = "JSON"
	case "postgres":
		s = "JSONB"
	}

	return
}

func (j *Json) Scan(value any) (err error) {
	bs, ok := value.([]byte)
	if !ok {
		return errInvalidData
	}

	result := json.RawMessage{}
	if err = json.Unmarshal(bs, &result); err != nil {
		return
	}

	*j = Json(result)

	return
}

func (j Json) Value() (val driver.Value, err error) {
	if len(j) == 0 {
		return
	}

	return json.RawMessage(j).MarshalJSON()
}

// Marshal
// ****************************************************************************************************************************************
func (o *Json) Marshal(dto any) (err error) {
	var bs []byte
	if bs, err = json.Marshal(dto); err != nil {
		return
	}

	*o = Json(bs)

	return
}

// Unmarshal
// ****************************************************************************************************************************************
func (o Json) Unmarshal(dto any) (err error) {
	if len(o) == 0 {
		return
	}

	return json.Unmarshal(o, dto)
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
