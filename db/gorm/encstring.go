package gorm

import (
	"database/sql/driver"

	"github.com/huyungtang/go-lib/encrypt"
	"github.com/huyungtang/go-lib/strings"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// EncStr
// ****************************************************************************************************************************************
type EncStr string

// Scan
// ****************************************************************************************************************************************
func (o *EncStr) Scan(val any) (err error) {
	var s string
	if s, err = decryptString(val); err != nil {
		return
	}

	*o = EncStr(s)

	return
}

// Value
// ****************************************************************************************************************************************
func (o EncStr) Value() (val driver.Value, err error) {
	return encryptString(o.String())
}

// Set
// ****************************************************************************************************************************************
func (o *EncStr) Set(s string) {
	*o = EncStr(s)
}

// String
// ****************************************************************************************************************************************
func (o EncStr) String() string {
	return string(o)
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// decryptString **************************************************************************************************************************
func decryptString(val any) (s string, err error) {
	var str string
	var isMatched bool
	if str, isMatched = val.(string); !isMatched {
		var bs []byte
		if bs, isMatched = val.([]byte); !isMatched {
			return "", errInvalidData
		}

		if len(bs) == 0 {
			return
		}

		str = string(bs)
	}

	s = strings.Format("$a%d$%s", encrypt.DefaCost, str)
	if s, err = encrypt.Decrypt(s); err != nil {
		return
	}

	return
}

// encryptString **************************************************************************************************************************
func encryptString(s string) (val driver.Value, err error) {
	val = ""
	if len(s) > 0 {
		if s, err = encrypt.Encrypt(s, encrypt.DefaCost); err != nil {
			return
		}

		val = s[5:]
	}

	return
}
