package db

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// DebugOption
// ****************************************************************************************************************************************
func DebugOption() Option {
	return func(o *Context) {
		o.Debug = true
	}
}

// SkipDefaultTransactionOption
// ****************************************************************************************************************************************
func SkipDefaultTransactionOption(s bool) Option {
	return func(d *Context) {
		d.SkipDefaultTransaction = s
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Context
// ****************************************************************************************************************************************
type Context struct {
	Debug                  bool
	SkipDefaultTransaction bool
}

// ApplyOptions
// ****************************************************************************************************************************************
func (o *Context) ApplyOptions(opts []Option, defa ...Option) (opt *Context) {
	opts = append(defa, opts...)
	for _, optFn := range opts {
		optFn(o)
	}

	return o
}

// Option
// ****************************************************************************************************************************************
type Option func(*Context)

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
