package rabbit

import (
	"encoding/json"

	"github.com/huyungtang/go-lib/queue"
	amqp "github.com/rabbitmq/amqp091-go"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// message ********************************************************************************************************************************
type message struct {
	*amqp.Delivery
	queue    string
	handler  int
	handlers []queue.ConsumerHandler
	err      error
}

// Ack
// ****************************************************************************************************************************************
func (o *message) Ack(multi bool) (err error) {
	return o.Delivery.Ack(multi)
}

// Reject
// ****************************************************************************************************************************************
func (o *message) Reject(requee bool) (err error) {
	return o.Delivery.Reject(requee)
}

// Exchange
// ****************************************************************************************************************************************
func (o *message) Exchange() string {
	return o.Delivery.Exchange
}

// Queue
// ****************************************************************************************************************************************
func (o *message) Queue() string {
	return o.queue
}

// Routing
// ****************************************************************************************************************************************
func (o *message) Routing() string {
	return o.Delivery.RoutingKey
}

// Message
// ****************************************************************************************************************************************
func (o *message) Body() []byte {
	return o.Delivery.Body
}

// String
// ****************************************************************************************************************************************
func (o *message) String() string {
	return string(o.Delivery.Body)
}

// Parse
// ****************************************************************************************************************************************
func (o *message) Parse(dto any) (err error) {
	return json.Unmarshal(o.Delivery.Body, dto)
}

// SetError
// ****************************************************************************************************************************************
func (o *message) SetError(err error) {
	o.err = err
}

// Err
// ****************************************************************************************************************************************
func (o *message) Err() (err error) {
	return o.err
}

// Next()
// ****************************************************************************************************************************************
func (o *message) Next() {
	o.handler++
	if o.handler >= len(o.handlers) || o.handlers[o.handler] == nil {
		return
	}

	o.handlers[o.handler](o)
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
