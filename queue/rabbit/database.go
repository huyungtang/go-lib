package rabbit

import (
	"github.com/huyungtang/go-lib/queue"
	amqp "github.com/rabbitmq/amqp091-go"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Init
// ****************************************************************************************************************************************
func Init(dsn string, opts ...queue.Options) (db queue.Database, err error) {
	var conn *amqp.Connection
	if conn, err = amqp.Dial(dsn); err != nil {
		return
	}

	cfg := queue.ApplyOptions(opts)

	return &database{conn, cfg.Handlers}, nil
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// database
// ****************************************************************************************************************************************
type database struct {
	*amqp.Connection
	handlers []queue.ConsumerHandler
}

// Exchange
// ****************************************************************************************************************************************
func (o *database) Exchange(name string, opts ...queue.Options) (exg queue.Exchange, err error) {
	var ch *amqp.Channel
	if ch, err = o.Connection.Channel(); err != nil {
		return
	}

	opts = append([]queue.Options{
		queue.NameOption(name),
		queue.ExchangeDirect,
		queue.DurableOption(true),
		queue.HandlerOption(o.handlers...),
	}, opts...)
	cfg := queue.ApplyOptions(opts)
	if err = ch.ExchangeDeclare(cfg.Name, cfg.Kind, cfg.Durable, cfg.AutoDelete, cfg.Internal, cfg.NoWait, cfg.Arguments); err != nil {
		return
	}

	return &exchange{
		name:     cfg.Name,
		Channel:  ch,
		handlers: cfg.Handlers,
	}, nil
}

// Close
// ****************************************************************************************************************************************
func (o *database) Close() (err error) {
	if o.Connection != nil {
		err = o.Connection.Close()
	}

	return
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
