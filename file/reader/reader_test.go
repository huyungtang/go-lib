package reader

import (
	"testing"

	"github.com/huyungtang/go-lib/file"
	"github.com/huyungtang/go-lib/strings"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// TestReader
// ****************************************************************************************************************************************
func TestReader(t *testing.T) {
	reader, err := Init(file.PathWorking("./../_testing/big5.txt"), file.Big5)
	if err != nil {
		t.Error(err)
	}
	defer reader.Close()

	bs, _ := reader.ReadAll()
	if len(bs) != 6228 {
		t.Fail()
	}

	evt := reader.Readln()
	line := 0
LOOP:
	for {
		select {
		case <-evt.EOF:
			break LOOP
		case err = <-evt.Error:
			t.Error(err)
			break LOOP
		case read := <-evt.Read:
			if line = int(read.LineNo); line == 40 && !strings.HasSuffix(read.Content, "蘇瑜婷") {
				t.Fail()
			}
		}
	}

	if line != 89 {
		t.Fail()
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
