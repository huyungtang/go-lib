package file

import (
	"errors"
	"fmt"
	"io"
	"os"

	"golang.org/x/text/transform"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// InitWriter
// ****************************************************************************************************************************************
func InitWriter(filename string, opts ...Options) (w Writer, err error) {
	if isExist := IsExist(filename); isExist == IsDir {
		return nil, errors.New("target is pointed to a directory")
	}

	if err = MakeDir(Dir(filename)); err != nil {
		return
	}

	opts = append([]Options{Override}, opts...)
	cfg := ApplyOptions(opts)

	var file *os.File
	if file, err = os.OpenFile(filename, cfg.Flag, os.ModePerm); err != nil {
		return
	}

	writer := &writer{file, file}
	if cfg.Encoding != nil {
		writer.Writer = transform.NewWriter(file, cfg.Encoding.NewEncoder())
	}

	return writer, nil
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// writer *********************************************************************************************************************************
type writer struct {
	*os.File
	io.Writer
}

// Writer
// ****************************************************************************************************************************************
type Writer interface {
	Write(string) error
	Writeln(string) error
	Close() error
}

// Write
// ****************************************************************************************************************************************
func (o *writer) Write(str string) (err error) {
	_, err = fmt.Fprint(o.Writer, str)

	return
}

// Writeln
// ****************************************************************************************************************************************
func (o *writer) Writeln(str string) (err error) {
	_, err = fmt.Fprintln(o.Writer, str)

	return
}

// Close
// ****************************************************************************************************************************************
func (o *writer) Close() (err error) {
	if o.File != nil {
		err = o.File.Close()
	}

	return
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
