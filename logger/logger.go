package logger

import (
	"fmt"
	"log"

	"strings"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Fatal
// ****************************************************************************************************************************************
func Fatal(err error) {
	log.Fatal(err)
}

// Log
// ****************************************************************************************************************************************
func Log(msg interface{}, args ...interface{}) {
	if s, isOK := msg.(string); isOK && strings.Contains(s, "%") {
		log.Printf(s, args...)
	} else {
		v := append([]interface{}{msg}, args...)
		log.Print(v...)
	}
}

// Print
// ****************************************************************************************************************************************
func Print(msg interface{}, args ...interface{}) {
	if s, isOK := msg.(string); isOK && strings.Contains(s, "%") {
		fmt.Printf(s, args...)
	} else {
		v := append([]interface{}{msg}, args...)
		fmt.Print(v...)
	}
}

// Println
// ****************************************************************************************************************************************
func Println(msg interface{}, args ...interface{}) {
	Print(msg, args...)
	fmt.Println("")
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
