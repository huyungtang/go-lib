package context

import (
	base "context"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Handler
// ****************************************************************************************************************************************
func Handler(opts ...Option) Context {
	ctx := &handlerCtx{
		Context: base.WithValue(base.Background(), handler{}, make([]handlerFunc, 0, len(opts))),
	}

	for _, opt := range opts {
		opt(ctx)
	}

	return ctx
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// handlerCtx *****************************************************************************************************************************
type handlerCtx struct {
	base.Context
}

// Context
// ****************************************************************************************************************************************
type Context interface {
	base.Context

	WithValue(key, val any)

	Next() error
}

// WithValue
// ****************************************************************************************************************************************
func (o *handlerCtx) WithValue(key, val any) {
	o.Context = base.WithValue(o.Context, key, val)
}

// Next
// ****************************************************************************************************************************************
func (o *handlerCtx) Next() (err error) {
	var idx int
	if v := o.Value(handlerIndex{}); v != nil {
		idx = v.(int)
	} else {
		idx = -1
	}

	idx++

	if handlers := o.Value(handler{}).([]handlerFunc); len(handlers) > idx {
		o.WithValue(handlerIndex{}, idx)

		return handlers[idx](o)
	}

	return
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
