package viper

import (
	"testing"

	"github.com/huyungtang/go-lib/config"
	"github.com/huyungtang/go-lib/file"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// TestConfig
// ****************************************************************************************************************************************
func TestConfig(t *testing.T) {
	config, err := Init(
		config.PathOption(file.PathWorking("../_testing")),
		config.EnvironmentOption("prod"),
	)
	if err != nil {
		t.Error(err)
	}

	cfg := &struct {
		TestString string
		TestBool   bool
		TestStruct struct {
			EncString string `config:"key=Encrypt.EncString"`
		}
		TestSliceInt    []int
		TestSliceString []string
	}{}
	if err = config.GetStruct(cfg); err != nil {
		t.Error(err)
	}

	if !cfg.TestBool ||
		cfg.TestString != "0.0.1667539322" ||
		cfg.TestStruct.EncString[0:4] != "amqp" ||
		len(cfg.TestSliceInt) != 5 ||
		len(cfg.TestSliceString) != 5 {
		t.Fail()
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
