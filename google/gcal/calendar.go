package gcal

import (
	"context"
	"time"

	"github.com/huyungtang/go-lib/google"
	"github.com/huyungtang/go-lib/times"
	base "google.golang.org/api/calendar/v3"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Init
// ****************************************************************************************************************************************
func Init(opts ...google.Options) (serv Service, err error) {
	cfg := new(google.Option).
		ApplyOptions(opts,
			CalendarIdOption("primary"),
			EventDurationOption(time.Hour),
		)

	var cal *base.Service
	if cal, err = base.NewService(context.Background(), cfg.GetClientOption()); err != nil {
		return
	}

	return &service{cal, cfg}, nil
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// service ********************************************************************************************************************************
type service struct {
	*base.Service
	*google.Option
}

// Service
// ****************************************************************************************************************************************
type Service interface {
	AddEvent(string, time.Time, ...google.Options) error
}

// AddEvent()
// ****************************************************************************************************************************************
func (o *service) AddEvent(summary string, tm time.Time, opts ...google.Options) (err error) {
	_, err = o.Events.Insert("primary", &base.Event{
		Summary: "testing calendar event 2",
		Start:   &base.EventDateTime{Date: times.Now().Format(times.RCF3339)[0:10]},
		End:     &base.EventDateTime{Date: times.Now().Add(0, 0, 0, 1).Format(times.RCF3339)[0:10]},
	}).Do()

	return
}

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
