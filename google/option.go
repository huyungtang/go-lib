package google

import (
	"context"
	"encoding/json"
	"net/mail"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// ApplyOptions
// ****************************************************************************************************************************************
func ApplyOptions(opts []Options) (opt *Option) {
	opt = new(Option)
	for _, optFn := range opts {
		optFn(opt)
	}

	return
}

// ConfigOption
// ****************************************************************************************************************************************
func ConfigOption(jsonKey, scope string) Options {
	return func(o *Option) {
		if config, err := google.ConfigFromJSON([]byte(jsonKey), scope); err == nil {
			o.Config = config
		}
	}
}

// OAuthTokenOption
// ****************************************************************************************************************************************
func OAuthTokenOption(token string) Options {
	return func(o *Option) {
		tkn := new(oauth2.Token)
		if err := json.Unmarshal([]byte(token), tkn); err == nil {
			o.Token = tkn
		}
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Option DO NOT DIRECT TO USE THIS
// ****************************************************************************************************************************************
type Option struct {
	*oauth2.Config
	*oauth2.Token

	MailTo  []*mail.Address
	MailCc  []*mail.Address
	MailBcc []*mail.Address
}

// GetClientOption
// ****************************************************************************************************************************************
func (o *Option) GetClientOption() option.ClientOption {
	return option.WithHTTPClient(o.Config.Client(context.Background(), o.Token))
}

// Options
// ****************************************************************************************************************************************
type Options func(*Option)

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
