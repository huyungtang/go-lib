package google

import (
	"context"
	"encoding/json"
	"net/textproto"
	"sync"
	"time"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/option"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// ClientSecretOption
// ****************************************************************************************************************************************
func ClientSecretOption(jsonKey string, scopes []string) Option {
	return func(o *Context) {
		if config, err := google.ConfigFromJSON([]byte(jsonKey), scopes...); err == nil {
			o.Config = config
		}
	}
}

// OAuthTokenOption
// ****************************************************************************************************************************************
func OAuthTokenOption(token string) Option {
	return func(o *Context) {
		tkn := new(oauth2.Token)
		if err := json.Unmarshal([]byte(token), tkn); err == nil {
			o.Token = tkn
		}
	}
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Context
// ****************************************************************************************************************************************
type Context struct {
	*oauth2.Config
	*oauth2.Token

	AllDay       bool
	CalendarId   string
	Description  string
	Recurrency   []string
	Timezone     string
	StartTime    time.Time
	EndTime      time.Time
	Transparency string
	MaxResult    int64
	NextPage     string

	Header     textproto.MIMEHeader
	Body       []byte
	Attach     map[string][]byte
	AttachOnce sync.Once
}

// ApplyOptions
// ****************************************************************************************************************************************
func (o *Context) ApplyOptions(opts []Option, defa ...Option) (opt *Context) {
	opts = append(defa, opts...)
	for _, optFn := range opts {
		optFn(o)
	}

	return o
}

// GetClientOption
// ****************************************************************************************************************************************
func (o *Context) GetClientOption() option.ClientOption {
	return option.WithHTTPClient(o.Config.Client(context.Background(), o.Token))
}

// Option
// ****************************************************************************************************************************************
type Option func(*Context)

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
