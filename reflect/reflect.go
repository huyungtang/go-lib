package reflect

import (
	base "reflect"
	"regexp"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// Clone
// ****************************************************************************************************************************************
func Clone(elem interface{}) interface{} {
	tar := base.New(TypeOf(elem))
	tar.Elem().Set(ValueOf(elem))

	return tar.Interface()
}

// GetTags
// ****************************************************************************************************************************************
func GetTags(field base.StructField, tag string) map[string]string {
	m := make(map[string]string)
	tags, isOk := field.Tag.Lookup(tag)
	switch {
	case tags == "-":
		m["ignore"] = ""
	case isOk:
		reg := regexp.MustCompile(`([a-zA-Z0-9<>-]+)([=:]([^;$]+))?`)
		ms := reg.FindAllStringSubmatch(tags, -1)
		for i := 0; i < len(ms); i++ {
			m[ms[i][1]] = ms[i][3]
		}
	}

	return m
}

// IsObject
// ****************************************************************************************************************************************
func IsObject(elem interface{}) bool {
	k := KindOf(elem)

	return k == base.Array ||
		k == base.Slice ||
		k == base.Map ||
		k == base.Struct
}

// IsPointer
// ****************************************************************************************************************************************
func IsPointer(elem interface{}) bool {
	return base.TypeOf(elem).Kind() == base.Ptr
}

// IsString
// ****************************************************************************************************************************************
func IsString(elem interface{}) bool {
	return unPointer(base.TypeOf(elem)).Kind() == base.String
}

// IsStruct
// ****************************************************************************************************************************************
func IsStruct(elem interface{}) bool {
	return unPointer(base.TypeOf(elem)).Kind() == base.Struct
}

// IsSlice
// ****************************************************************************************************************************************
func IsSlice(elem interface{}) bool {
	return unPointer(base.TypeOf(elem)).Kind() == base.Slice
}

// KindOf never return reflect.Ptr
// ****************************************************************************************************************************************
func KindOf(elem interface{}) base.Kind {
	tp := unPointer(base.TypeOf(elem))

	return tp.Kind()
}

// SetNil
// ****************************************************************************************************************************************
func SetNil(field base.Value) {
	field.Set(base.Zero(field.Type()))
}

// TypeOf
// ****************************************************************************************************************************************
func TypeOf(elem interface{}) base.Type {
	return unPointer(base.TypeOf(elem))
}

// ValueOf
// ****************************************************************************************************************************************
func ValueOf(dto interface{}) base.Value {
	return elemValue(base.ValueOf(dto))
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// unPointer ******************************************************************************************************************************
func unPointer(tp base.Type) base.Type {
	if tp.Kind() == base.Ptr {
		return unPointer(tp.Elem())
	}

	return tp
}

// elemValue ******************************************************************************************************************************
func elemValue(val base.Value) base.Value {
	if val.Type().Kind() == base.Ptr {
		return elemValue(val.Elem())
	}

	return val
}
