package http

import (
	"testing"

	"github.com/huyungtang/go-lib/config"
	"github.com/huyungtang/go-lib/config/viper"
	"github.com/huyungtang/go-lib/file"
)

// constants & variables ******************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// public functions ***********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// TestGet
// ****************************************************************************************************************************************
func TestGet(t *testing.T) {
	c, err := viper.Init(
		config.PathOption(file.PathWorking("_testing")),
		config.EnvironmentOption("prod"),
	)
	if err != nil {
		t.Error(err)
	}

	cfg := &struct {
		Host string
		Path string
	}{}
	if err = c.GetStruct(cfg, config.PathOption("HTTPTest")); err != nil {
		t.Error(err)
	}

	ctx, err := Init(cfg.Host, HandlerOption(func(sc Session) {
		t.Log("---------- session start ----------")
		sc.Next()
		t.Log("---------- session ended ----------")
	}))
	if err != nil {
		t.Fail()
	}

	ctx.Get(cfg.Path, HandlerOption(func(sc Session) {
		t.Log("---------- handler start ----------")
		if sc.StatusCode() != 200 {
			t.Fail()
		}
		t.Log(sc.StatusCode(), sc.Status())
		t.Log("---------- handler ended ----------")
	}))

	ctx.Get(cfg.Path, HandlerOption(func(sc Session) {
		t.Log("---------- handler start ----------")
		if sc.StatusCode() != 200 {
			t.Fail()
		}
		t.Log(sc.StatusCode(), sc.Status())
		t.Log("---------- handler ended ----------")
	}))

	ctx.Get(cfg.Path, HandlerOption(func(sc Session) {
		t.Log("---------- handler start ----------")
		if sc.StatusCode() != 200 {
			t.Fail()
		}
		t.Log(sc.StatusCode(), sc.Status())
		t.Log("---------- handler ended ----------")
	}))
}

// type defineds **************************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************

// private functions **********************************************************************************************************************
// ****************************************************************************************************************************************
// ****************************************************************************************************************************************
